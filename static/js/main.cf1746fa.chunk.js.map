{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layouts/Header.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","showTime","end","moment","fromNow","notificationBell","completed","id","className","onClick","props","openDialogue","bind","this","todo","title","delTodo","toggleCompleted","Component","Todos","todos","map","key","React","Header","state","task","onChange","e","setState","target","value","onSubmit","preventDefault","toastr","options","positionClass","error","input","current","focus","addTodo","createRef","type","autoFocus","autoComplete","placeholder","name","ref","aria-label","Dialog","lazy","App","open","task_id","handleClose","updateLocalStorage","localStorage","setItem","JSON","stringify","filter","newTodo","uuidv4","setReminder","dateTime","length","data","getItem","parse","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cf1746fa.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport moment from 'moment';\r\n\r\nclass TodoItem extends Component {\r\n\r\n    showTime =(end) => {\r\n        if (end) {\r\n            return moment(end).fromNow()\r\n        }\r\n    }\r\n\r\n    notificationBell = (completed, id) => {\r\n        if (!completed) {\r\n            return(\r\n                <button className=\"reminder\" onClick={this.props.openDialogue.bind(this, id)} >\r\n                    <i className=\"fa fa-bell fs-19 text-primary\"></i>\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {id , title, completed, end} = this.props.todo\r\n        return (\r\n            <li> {title} \r\n            <span>\r\n                {this.showTime(end)}\r\n            </span>\r\n                <div className=\"buttons\" >\r\n                    <button className=\"remove\" onClick={this.props.delTodo.bind(this,id)}>\r\n                        <i className=\"fa fa-trash fs-19 text-danger\"></i>\r\n                    </button>\r\n                    <button className=\"complete\" onClick={this.props.toggleCompleted.bind(this, id)} >\r\n                        <i className=\"fa fa-check fs-19 text-success\"></i>\r\n                    </button>\r\n                    {this.notificationBell(completed , id)}\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\nexport default TodoItem","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todos extends React.Component {\r\n    render() {\r\n        return this.props.todos.map((todo) => (        \r\n            <TodoItem key={todo.id} \r\n            todo={todo} delTodo={this.props.delTodo} \r\n            openDialogue={this.props.openDialogue}\r\n            toggleCompleted={this.props.toggleCompleted} />\r\n        ));\r\n    }\r\n}\r\n\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;","import React, { Component, Fragment } from 'react'\r\nimport toastr from 'toastr'\r\nimport 'toastr/build/toastr.min.css'\r\n\r\nclass Header extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.input = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        task:'',\r\n    }\r\n\r\n    onChange = (e) => this.setState({task: e.target.value})\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.task === '') {\r\n            toastr.options = {\r\n                positionClass: 'toast-bottom-left',\r\n            }\r\n            toastr.error('Please provide a task. The task cannot be empty','Ooops!' )\r\n            this.input.current.focus();\r\n            return;\r\n        }\r\n        this.props.addTodo(this.state.task);\r\n        this.setState({ task: '' })\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <header>\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <input type=\"text\" \r\n                            autoFocus \r\n                            autoComplete=\"off\"\r\n                            placeholder=\"Enter an activity...\"\r\n                            id=\"item\" name=\"todo_item\" onChange={this.onChange}\r\n                            value={this.state.task}\r\n                            ref={this.input}\r\n                            aria-label=\"Type a task\"\r\n                        />\r\n                        <button id=\"add\" type=\"submit\" aria-label=\"Add a task\">\r\n                            <i className=\"fa fa-plus text-white fs-19\"></i>\r\n                        </button>\r\n                    </form>\r\n            </header>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, {lazy, Suspense} from 'react';\r\nimport './App.css';\r\nimport Todos from \"./components/Todos\";\r\nimport Header from './components/layouts/Header';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nconst Dialog = lazy(() => import('./components/layouts/Dialog'));\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    todos: [],\r\n    completed: [],\r\n    open: false,\r\n    task_id: ''\r\n  }\r\n\r\n  openDialogue = (id) => {\r\n    this.setState({ open: true, task_id: id });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  componentDidMount() {\r\n    const data = (localStorage.getItem('todoList')) ? JSON.parse(localStorage.getItem('todoList')) : {\r\n      todos: [],\r\n      completed: []\r\n    };\r\n    let {todos, completed} = data\r\n    if (!todos) todos = [];\r\n    if(!completed) completed = [];\r\n    \r\n    this.setState({todos,completed})\r\n  }\r\n\r\n  updateLocalStorage = () => {\r\n    const { todos, completed } = this.state\r\n    localStorage.setItem('todoList', JSON.stringify({ todos, completed }));\r\n  }\r\n\r\n  delTodo = (id) => {\r\n    let { todos, completed } = this.state\r\n    this.setState({\r\n      todos : [...todos.filter(todo => todo.id !== id)],\r\n      completed: [...completed.filter(todo => todo.id !== id)]\r\n    }, () => this.updateLocalStorage());\r\n    \r\n  }\r\n\r\n  addTodo = (task) => {\r\n    const newTodo = {\r\n      id: uuidv4(),\r\n        title: task,\r\n        completed: false\r\n    }\r\n\r\n    this.setState({ todos: [ newTodo, ...this.state.todos ] },() => this.updateLocalStorage())\r\n\r\n    \r\n  }\r\n\r\n  setReminder = (dateTime) => {\r\n    const {open, task_id, todos} = this.state\r\n    if(open && task_id){\r\n      \r\n      this.setState({ todos: todos.map(task => {\r\n        if(task.id === task_id){\r\n          task.end = dateTime\r\n        }\r\n        return task;\r\n      })\r\n      }, () => this.updateLocalStorage())\r\n    }\r\n    this.handleClose()\r\n  }\r\n\r\n  toggleCompleted = (id) => {\r\n    let { todos, completed } = this.state\r\n\r\n    let task = completed.filter(task => task.id === id).length === 0 ? \r\n      todos.filter(task => task.id === id) : completed.filter(task => task.id === id);\r\n    task = task[0];\r\n\r\n      if(task && task.completed){\r\n      task.completed = false;\r\n      this.setState({\r\n        todos: [ ...todos, task],\r\n        completed: [ ...completed.filter(todo => todo.id !== id) ]\r\n      }, () => this.updateLocalStorage());\r\n    }else{\r\n      task.completed = true;\r\n      this.setState({\r\n        todos: [ ...todos.filter(todo => todo.id !== id) ],\r\n        completed: [ ...completed, task ]\r\n      }, () => this.updateLocalStorage());\r\n    }\r\n    \r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <Header addTodo={this.addTodo} />\r\n        <div className=\"container\">\r\n          {/*  Uncompleted tasks */}\r\n          <ul className=\"todo\" id=\"todo\">\r\n            <Todos todos={this.state.todos} delTodo={this.delTodo} toggleCompleted={this.toggleCompleted} openDialogue={this.openDialogue} />\r\n          </ul>\r\n            {/* Completed tasks */}\r\n          <ul className=\"todo\" id=\"completed\">\r\n              <Todos todos={this.state.completed} delTodo={this.delTodo} toggleCompleted={this.toggleCompleted} />\r\n          </ul>\r\n        </div>\r\n        {/* dialogue */}\r\n        <Suspense fallback={<div></div>}>\r\n          <Dialog handleClose={this.handleClose} open={this.state.open} setReminder={this.setReminder} >\r\n\r\n          </Dialog>\r\n        </Suspense>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}